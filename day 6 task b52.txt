1.https://github.com/rvsp/typescript-oops/blob/master/Practice/Movie.md
The class Movie is stated below. An instance of class Movie represents a film. This class has the following three properties:

title, which is a String representing the title of the movie
studio, which is a String representing the studio that made the movie
rating, which is a String representing the rating of the movie (i.e. PG­13, R, etc)
a) Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.

b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.

c) Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.

d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”


answers:


a. class Movie {
  constructor(title, studio, rating = "PG") {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
}





b. class Movie {
  constructor(title, studio, rating = "PG") {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
}



c. class Movie {
  constructor(title, studio, rating = "PG") {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }

  static getPG(movies) {
    return movies.filter(movie => movie.rating === "PG");
  }
}




d. const casinoRoyale = new Movie("Casino Royale", "Eon Productions", "PG-13");






2.https://github.com/rvsp/typescript-oops/blob/master/Practice/class-circle.md

answer:

class Circle {
  private radius: number = 1.0;
  private color: string = "red";

  constructor(radius?: number, color?: string) {
    if (radius) {
      this.radius = radius;
    }
    if (color) {
      this.color = color;
    }
  }

  getRadius(): number {
    return this.radius;
  }

  setRadius(radius: number): void {
    this.radius = radius;
  }

  getColor(): string {
    return this.color;
  }

  setColor(color: string): void {
    this.color = color;
  }

  toString(): string {
    return `Circle[radius=${this.radius},color=${this.color}]`;
  }

  getArea(): number {
    return Math.PI * this.radius * this.radius;
  }

  getCircumference(): number {
    return 2 * Math.PI * this.radius;
  }
}







3. Write a “person” class to hold all the details.

answer:

class Person {
  constructor(name, age, address) {
    this.name = name;
    this.age = age;
    this.address = address;
  }
}

// Creating instances of the Person class
const person1 = new Person("Deepak", 30, "123 Main St");
const person2 = new Person("John", 25, "456 Elm St");

// Accessing properties of the Person objects
console.log(person1.name);     // Output: "Deepak"
console.log(person1.age);      // Output: 30
console.log(person1.address);  // Output: "123 Main St"

console.log(person2.name);     // Output: "John"
console.log(person2.age);      // Output: 25
console.log(person2.address);  // Output: "456 Elm St"





4. write a class to calculate the uber price.

answer:

class UberPriceCalculator {
  constructor(baseFare, ratePerKilometer, ratePerMinute) {
    this.baseFare = baseFare;
    this.ratePerKilometer = ratePerKilometer;
    this.ratePerMinute = ratePerMinute;
  }

  calculatePrice(distanceInKm, timeInMinutes) {
    const distanceCost = distanceInKm * this.ratePerKilometer;
    const timeCost = timeInMinutes * this.ratePerMinute;
    const totalPrice = this.baseFare + distanceCost + timeCost;
    return totalPrice;
  }
}

// Example usage:
const calculator = new UberPriceCalculator(5, 1.5, 0.2);
const distance = 10; // 10 kilometers
const time = 20; // 20 minutes

const totalPrice = calculator.calculatePrice(distance, time);
console.log(`The estimated Uber price is $${totalPrice.toFixed(2)}`); //The estimated Uber price is $24.00
